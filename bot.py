import asyncio
from aiogram import Bot, Dispatcher, types, F
from aiogram.enums import ChatMemberStatus
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.filters import Command
from config import BOT_TOKEN, CHANNEL_USERNAME, ADMIN_IDS
from database import add_user, get_all_users
from aiogram import Router
from database import init_db


bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()
router = Router()
dp.include_router(router)

# üëá –ö–Ω–æ–ø–∫–∞ "–û—Ç–∫—Ä—ã—Ç—å –¥–æ—Å—Ç—É–ø"
def get_main_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–û—Ç–∫—Ä—ã—Ç—å –¥–æ—Å—Ç—É–ø", callback_data="check_sub")]
    ])

# üìå –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
async def is_subscribed(user_id: int) -> bool:
    member = await bot.get_chat_member(CHANNEL_USERNAME, user_id)
    return member.status in [ChatMemberStatus.MEMBER, ChatMemberStatus.ADMINISTRATOR, ChatMemberStatus.CREATOR]

# /start
@router.message(Command("start"))
async def start_handler(message: types.Message):
    user_id = message.from_user.id
    add_user(user_id)
    text = "üëã –ü—Ä–∏–≤–µ—Ç! –ß—Ç–æ–±—ã –∑–∞–±—Ä–∞—Ç—å —à–∞–±–ª–æ–Ω –Ω–∞–≤—Å–µ–≥–¥–∞ –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –µ–≥–æ —É–∂–µ —Å–µ–π—á–∞—Å - –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –º–æ–π –∫–∞–Ω–∞–ª):"
    await message.answer(text, reply_markup=get_main_keyboard())

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ –∫–Ω–æ–ø–∫–µ
@router.callback_query(F.data == "check_sub")
async def check_subscription(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    if await is_subscribed(user_id):
        await callback.message.edit_text(
            "‚úÖ –¢—ã –ø–æ–¥–ø–∏—Å–∞–Ω! [–í–æ—Ç —Ç–≤–æ–π —à–∞–±–ª–æ–Ω)](https://docs.google.com/spreadsheets/d/1WZp0CKb8ZNmsyFofwGolaxKaRZE-VmRp37qiUvMP-lg/edit?usp=sharing)",
            parse_mode="Markdown"
        )
    else:
        await callback.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ —Å—Ç–æ–∏—Ç –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª.", show_alert=True)

# –†–∞—Å—Å—ã–ª–∫–∞
@router.message(Command("broadcast"))
async def broadcast_handler(message: types.Message):
    if message.from_user.id not in ADMIN_IDS:
        return await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É.")
    
    parts = message.text.split(" ", 1)
    if len(parts) < 2:
        return await message.answer("‚ùó –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É: /broadcast –≤–∞—à_—Ç–µ–∫—Å—Ç")

    text_to_send = parts[1]
    users = get_all_users()
    count = 0

    for uid in users:
        try:
            await bot.send_message(uid, text_to_send)
            count += 1
        except:
            continue

    await message.answer(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.")

# üîÅ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await dp.start_polling(bot)
    await init_db()
    # –∑–∞–ø—É—Å–∫ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞

if __name__ == "__main__":
    asyncio.run(main())
