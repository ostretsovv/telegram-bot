from sqlalchemy.ext.asyncio import AsyncSession, create_async_engine
from sqlalchemy.orm import sessionmaker, declarative_base
from sqlalchemy import Column, BigInteger
import os

# üìå –°—Ç—Ä–æ–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è Railway
DATABASE_URL = os.getenv("DATABASE_URL")

# ‚úÖ Async SQLAlchemy
engine = create_async_engine(DATABASE_URL, echo=False)
Base = declarative_base()
async_session = sessionmaker(engine, class_=AsyncSession, expire_on_commit=False)

# üîπ –ú–æ–¥–µ–ª—å —Ç–∞–±–ª–∏—Ü—ã
class User(Base):
    __tablename__ = "users"
    user_id = Column(BigInteger, primary_key=True)

# ‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
async def init_db():
    async with engine.begin() as conn:
        await conn.run_sync(Base.metadata.create_all)

# ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def add_user(user_id: int):
    async with async_session() as session:
        user = await session.get(User, user_id)
        if not user:
            session.add(User(user_id=user_id))
            await session.commit()

# ‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
async def get_all_users():
    async with async_session() as session:
        result = await session.execute(
            User.__table__.select()
        )
        users = result.scalars().all()
        return [user.user_id for user in users]